// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dcm.proto

package dcm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A block of data, to simply increase gRPC message size and test.
type Payload struct {
	// Primary contents of payload.
	Body                 []byte   `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Payload) Reset()         { *m = Payload{} }
func (m *Payload) String() string { return proto.CompactTextString(m) }
func (*Payload) ProtoMessage()    {}
func (*Payload) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcm_6b5a6ac7b514161b, []int{0}
}
func (m *Payload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Payload.Unmarshal(m, b)
}
func (m *Payload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Payload.Marshal(b, m, deterministic)
}
func (dst *Payload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payload.Merge(dst, src)
}
func (m *Payload) XXX_Size() int {
	return xxx_messageInfo_Payload.Size(m)
}
func (m *Payload) XXX_DiscardUnknown() {
	xxx_messageInfo_Payload.DiscardUnknown(m)
}

var xxx_messageInfo_Payload proto.InternalMessageInfo

func (m *Payload) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

// diagnostic data request message.
type DiagResponse struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiagResponse) Reset()         { *m = DiagResponse{} }
func (m *DiagResponse) String() string { return proto.CompactTextString(m) }
func (*DiagResponse) ProtoMessage()    {}
func (*DiagResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcm_6b5a6ac7b514161b, []int{1}
}
func (m *DiagResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiagResponse.Unmarshal(m, b)
}
func (m *DiagResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiagResponse.Marshal(b, m, deterministic)
}
func (dst *DiagResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiagResponse.Merge(dst, src)
}
func (m *DiagResponse) XXX_Size() int {
	return xxx_messageInfo_DiagResponse.Size(m)
}
func (m *DiagResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DiagResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DiagResponse proto.InternalMessageInfo

func (m *DiagResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *DiagResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// diagnostic data response message.
type DiagRecorderData struct {
	CanId                int32    `protobuf:"varint,1,opt,name=canId,proto3" json:"canId,omitempty"`
	Payload              *Payload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiagRecorderData) Reset()         { *m = DiagRecorderData{} }
func (m *DiagRecorderData) String() string { return proto.CompactTextString(m) }
func (*DiagRecorderData) ProtoMessage()    {}
func (*DiagRecorderData) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcm_6b5a6ac7b514161b, []int{2}
}
func (m *DiagRecorderData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiagRecorderData.Unmarshal(m, b)
}
func (m *DiagRecorderData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiagRecorderData.Marshal(b, m, deterministic)
}
func (dst *DiagRecorderData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiagRecorderData.Merge(dst, src)
}
func (m *DiagRecorderData) XXX_Size() int {
	return xxx_messageInfo_DiagRecorderData.Size(m)
}
func (m *DiagRecorderData) XXX_DiscardUnknown() {
	xxx_messageInfo_DiagRecorderData.DiscardUnknown(m)
}

var xxx_messageInfo_DiagRecorderData proto.InternalMessageInfo

func (m *DiagRecorderData) GetCanId() int32 {
	if m != nil {
		return m.CanId
	}
	return 0
}

func (m *DiagRecorderData) GetPayload() *Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*Payload)(nil), "dcm.Payload")
	proto.RegisterType((*DiagResponse)(nil), "dcm.DiagResponse")
	proto.RegisterType((*DiagRecorderData)(nil), "dcm.DiagRecorderData")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DCMServiceClient is the client API for DCMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DCMServiceClient interface {
	// DCM to Server client side streaming of diagnostic data
	DiagnosticData(ctx context.Context, opts ...grpc.CallOption) (DCMService_DiagnosticDataClient, error)
}

type dCMServiceClient struct {
	cc *grpc.ClientConn
}

func NewDCMServiceClient(cc *grpc.ClientConn) DCMServiceClient {
	return &dCMServiceClient{cc}
}

func (c *dCMServiceClient) DiagnosticData(ctx context.Context, opts ...grpc.CallOption) (DCMService_DiagnosticDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DCMService_serviceDesc.Streams[0], "/dcm.DCMService/DiagnosticData", opts...)
	if err != nil {
		return nil, err
	}
	x := &dCMServiceDiagnosticDataClient{stream}
	return x, nil
}

type DCMService_DiagnosticDataClient interface {
	Send(*DiagRecorderData) error
	CloseAndRecv() (*DiagResponse, error)
	grpc.ClientStream
}

type dCMServiceDiagnosticDataClient struct {
	grpc.ClientStream
}

func (x *dCMServiceDiagnosticDataClient) Send(m *DiagRecorderData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dCMServiceDiagnosticDataClient) CloseAndRecv() (*DiagResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DiagResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DCMServiceServer is the server API for DCMService service.
type DCMServiceServer interface {
	// DCM to Server client side streaming of diagnostic data
	DiagnosticData(DCMService_DiagnosticDataServer) error
}

func RegisterDCMServiceServer(s *grpc.Server, srv DCMServiceServer) {
	s.RegisterService(&_DCMService_serviceDesc, srv)
}

func _DCMService_DiagnosticData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DCMServiceServer).DiagnosticData(&dCMServiceDiagnosticDataServer{stream})
}

type DCMService_DiagnosticDataServer interface {
	SendAndClose(*DiagResponse) error
	Recv() (*DiagRecorderData, error)
	grpc.ServerStream
}

type dCMServiceDiagnosticDataServer struct {
	grpc.ServerStream
}

func (x *dCMServiceDiagnosticDataServer) SendAndClose(m *DiagResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dCMServiceDiagnosticDataServer) Recv() (*DiagRecorderData, error) {
	m := new(DiagRecorderData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _DCMService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dcm.DCMService",
	HandlerType: (*DCMServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DiagnosticData",
			Handler:       _DCMService_DiagnosticData_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "dcm.proto",
}

func init() { proto.RegisterFile("dcm.proto", fileDescriptor_dcm_6b5a6ac7b514161b) }

var fileDescriptor_dcm_6b5a6ac7b514161b = []byte{
	// 214 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x49, 0xce, 0xd5,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x49, 0xce, 0x55, 0x92, 0xe5, 0x62, 0x0f, 0x48,
	0xac, 0xcc, 0xc9, 0x4f, 0x4c, 0x11, 0x12, 0xe2, 0x62, 0x49, 0xca, 0x4f, 0xa9, 0x94, 0x60, 0x52,
	0x60, 0xd4, 0xe0, 0x09, 0x02, 0xb3, 0x95, 0x6c, 0xb8, 0x78, 0x5c, 0x32, 0x13, 0xd3, 0x83, 0x52,
	0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x41, 0x6a, 0x92, 0xf3, 0x53, 0x52, 0x25, 0x18, 0x15, 0x18,
	0x35, 0x58, 0x83, 0xc0, 0x6c, 0x21, 0x09, 0x2e, 0xf6, 0xdc, 0xd4, 0xe2, 0xe2, 0xc4, 0xf4, 0x54,
	0xb0, 0x56, 0xce, 0x20, 0x18, 0x57, 0x29, 0x80, 0x4b, 0x00, 0xa2, 0x3b, 0x39, 0xbf, 0x28, 0x25,
	0xb5, 0xc8, 0x25, 0xb1, 0x24, 0x51, 0x48, 0x84, 0x8b, 0x35, 0x39, 0x31, 0xcf, 0x33, 0x05, 0x6a,
	0x04, 0x84, 0x23, 0xa4, 0xc6, 0xc5, 0x5e, 0x00, 0x71, 0x06, 0xd8, 0x0c, 0x6e, 0x23, 0x1e, 0x3d,
	0x90, 0x43, 0xa1, 0x4e, 0x0b, 0x82, 0x49, 0x1a, 0xf9, 0x70, 0x71, 0xb9, 0x38, 0xfb, 0x06, 0xa7,
	0x16, 0x95, 0x65, 0x26, 0xa7, 0x0a, 0xd9, 0x71, 0xf1, 0x81, 0xcc, 0xcf, 0xcb, 0x2f, 0x2e, 0xc9,
	0x4c, 0x06, 0x9b, 0x2e, 0x0a, 0xd6, 0x86, 0x6e, 0xa9, 0x94, 0x20, 0x92, 0x30, 0xc4, 0x27, 0x4a,
	0x0c, 0x1a, 0x8c, 0x49, 0x6c, 0xe0, 0x80, 0x30, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xb9, 0x82,
	0x04, 0x3a, 0x15, 0x01, 0x00, 0x00,
}
